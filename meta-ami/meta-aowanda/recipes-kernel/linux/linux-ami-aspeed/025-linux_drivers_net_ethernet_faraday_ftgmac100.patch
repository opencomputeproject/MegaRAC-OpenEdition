diff -Naur linux/drivers/net/ethernet/faraday/ftgmac100.c linux-new/drivers/net/ethernet/faraday/ftgmac100.c
--- linux/drivers/net/ethernet/faraday/ftgmac100.c	2020-12-21 07:27:07.000000000 -0500
+++ linux-new/drivers/net/ethernet/faraday/ftgmac100.c	2020-12-23 16:30:49.311173386 -0500
@@ -90,6 +90,9 @@
 	struct mii_bus *mii_bus;
 	struct clk *clk;
 
+	/* 2600 RMII clock gate */
+	struct clk *rclk;
+
 	/* Link management */
 	int cur_speed;
 	int cur_duplex;
@@ -107,6 +110,7 @@
 	/* Misc */
 	bool need_mac_restart;
 	bool is_aspeed;
+	u32 tm_reg_mask;
 };
 
 static int ftgmac100_reset_mac(struct ftgmac100 *priv, u32 maccr)
@@ -301,6 +305,10 @@
 	reg |= (tfifo_sz << 27);
 	reg |= (rfifo_sz << 24);
 	iowrite32(reg, priv->base + FTGMAC100_OFFSET_TPAFCR);
+	
+	iowrite32(priv->tm_reg_mask |
+		      ioread32(priv->base + FTGMAC100_OFFSET_TM),
+		  priv->base + FTGMAC100_OFFSET_TM);
 }
 
 static void ftgmac100_start_hw(struct ftgmac100 *priv)
@@ -1717,12 +1725,14 @@
 		   nd->link_up ? "up" : "down");
 }
 
-static void ftgmac100_setup_clk(struct ftgmac100 *priv)
+static int ftgmac100_setup_clk(struct ftgmac100 *priv)
 {
-	priv->clk = devm_clk_get(priv->dev, NULL);
-	if (IS_ERR(priv->clk))
-		return;
+	struct clk *clk;
 
+	clk = devm_clk_get(priv->dev, NULL /* MACCLK */);
+	if (IS_ERR(clk))
+		return PTR_ERR(clk);
+	priv->clk = clk;
 	clk_prepare_enable(priv->clk);
 
 	/* Aspeed specifies a 100MHz clock is required for up to
@@ -1731,6 +1741,14 @@
 	 */
 	clk_set_rate(priv->clk, priv->use_ncsi ? FTGMAC_25MHZ :
 			FTGMAC_100MHZ);
+
+	/* RCLK is for RMII, typically used for NCSI. Optional because its not
+	 * necessary if it's the 2400 MAC or the MAC is configured for RGMII
+	 */
+	priv->rclk = devm_clk_get_optional(priv->dev, "RCLK");
+	clk_prepare_enable(priv->rclk);
+
+	return 0;
 }
 
 static int ftgmac100_probe(struct platform_device *pdev)
@@ -1807,14 +1825,12 @@
 		priv->rxdes0_edorr_mask = BIT(30);
 		priv->txdes0_edotr_mask = BIT(30);
 		priv->is_aspeed = true;
-		/* Disable ast2600 problematic HW arbitration */
-		if (of_device_is_compatible(np, "aspeed,ast2600-mac")) {
-			iowrite32(FTGMAC100_TM_DEFAULT,
-				  priv->base + FTGMAC100_OFFSET_TM);
-		}
+		if (of_device_is_compatible(np, "aspeed,ast2600-mac"))
+			priv->tm_reg_mask = FTGMAC100_TM_RQ_TX_VALID_DIS | FTGMAC100_TM_RQ_RR_IDLE_PREV;
 	} else {
 		priv->rxdes0_edorr_mask = BIT(15);
 		priv->txdes0_edotr_mask = BIT(15);
+		priv->tm_reg_mask = 0;
 	}
 
 	if (np && of_get_property(np, "use-ncsi", NULL)) {
@@ -1857,8 +1873,11 @@
 			goto err_setup_mdio;
 	}
 
-	if (priv->is_aspeed)
-		ftgmac100_setup_clk(priv);
+	if (priv->is_aspeed) {
+		err = ftgmac100_setup_clk(priv);
+		if (err)
+			goto err_ncsi_dev;
+	}
 
 	/* Default ring sizes */
 	priv->rx_q_entries = priv->new_rx_q_entries = DEF_RX_QUEUE_ENTRIES;
@@ -1890,10 +1909,11 @@
 
 	return 0;
 
-err_ncsi_dev:
-	if (priv->ndev)
-		ncsi_unregister_dev(priv->ndev);
 err_register_netdev:
+	if (priv->rclk)
+		clk_disable_unprepare(priv->rclk);
+	clk_disable_unprepare(priv->clk);
+err_ncsi_dev:
 	ftgmac100_destroy_mdio(netdev);
 err_setup_mdio:
 	iounmap(priv->base);
@@ -1913,10 +1933,10 @@
 	netdev = platform_get_drvdata(pdev);
 	priv = netdev_priv(netdev);
 
-	if (priv->ndev)
-		ncsi_unregister_dev(priv->ndev);
 	unregister_netdev(netdev);
 
+	if (priv->rclk)
+		clk_disable_unprepare(priv->rclk);
 	clk_disable_unprepare(priv->clk);
 
 	/* There's a small chance the reset task will have been re-queued,
